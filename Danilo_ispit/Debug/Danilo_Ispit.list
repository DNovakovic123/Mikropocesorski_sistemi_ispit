
Danilo_Ispit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003014  08003014  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003014  08003014  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003014  08003014  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800301c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  0800308c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800308c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a38  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d6  00000000  00000000  00024ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  00025ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  000263e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016226  00000000  00000000  00026860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064b6  00000000  00000000  0003ca86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000806e8  00000000  00000000  00042f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001780  00000000  00000000  000c3674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f7c 	.word	0x08002f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f7c 	.word	0x08002f7c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <LCD_init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void LCD_init()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	LCD(0x38,0);
 8000658:	2100      	movs	r1, #0
 800065a:	2038      	movs	r0, #56	; 0x38
 800065c:	f000 f812 	bl	8000684 <LCD>
	LCD(0x0C,0);
 8000660:	2100      	movs	r1, #0
 8000662:	200c      	movs	r0, #12
 8000664:	f000 f80e 	bl	8000684 <LCD>
	LCD(0x06,0);
 8000668:	2100      	movs	r1, #0
 800066a:	2006      	movs	r0, #6
 800066c:	f000 f80a 	bl	8000684 <LCD>
	LCD(0x01,0);
 8000670:	2100      	movs	r1, #0
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f806 	bl	8000684 <LCD>
	LCD(0x80,0);
 8000678:	2100      	movs	r1, #0
 800067a:	2080      	movs	r0, #128	; 0x80
 800067c:	f000 f802 	bl	8000684 <LCD>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <LCD>:
void LCD(uint8_t val_1 ,uint8_t cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	uint8_t data1;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,cmd);
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	461a      	mov	r2, r3
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4838      	ldr	r0, [pc, #224]	; (8000780 <LCD+0xfc>)
 800069e:	f001 fa41 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=val_1 & 0x01;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,data1);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	461a      	mov	r2, r3
 80006ae:	2101      	movs	r1, #1
 80006b0:	4833      	ldr	r0, [pc, #204]	; (8000780 <LCD+0xfc>)
 80006b2:	f001 fa37 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>1) & 0x01;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	085b      	lsrs	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,data1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	461a      	mov	r2, r3
 80006c6:	2102      	movs	r1, #2
 80006c8:	482d      	ldr	r0, [pc, #180]	; (8000780 <LCD+0xfc>)
 80006ca:	f001 fa2b 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>2) & 0x01;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2,data1);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	461a      	mov	r2, r3
 80006de:	2104      	movs	r1, #4
 80006e0:	4827      	ldr	r0, [pc, #156]	; (8000780 <LCD+0xfc>)
 80006e2:	f001 fa1f 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>3) & 0x01;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,data1);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	461a      	mov	r2, r3
 80006f6:	2108      	movs	r1, #8
 80006f8:	4821      	ldr	r0, [pc, #132]	; (8000780 <LCD+0xfc>)
 80006fa:	f001 fa13 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>4) & 0x01;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,data1);
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	461a      	mov	r2, r3
 800070e:	2110      	movs	r1, #16
 8000710:	481b      	ldr	r0, [pc, #108]	; (8000780 <LCD+0xfc>)
 8000712:	f001 fa07 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>5) & 0x01;
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	095b      	lsrs	r3, r3, #5
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,data1);
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	461a      	mov	r2, r3
 8000726:	2120      	movs	r1, #32
 8000728:	4815      	ldr	r0, [pc, #84]	; (8000780 <LCD+0xfc>)
 800072a:	f001 f9fb 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>6) & 0x01;
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	099b      	lsrs	r3, r3, #6
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,data1);
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	461a      	mov	r2, r3
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	480f      	ldr	r0, [pc, #60]	; (8000780 <LCD+0xfc>)
 8000742:	f001 f9ef 	bl	8001b24 <HAL_GPIO_WritePin>

	data1=(val_1>>7) & 0x01;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	09db      	lsrs	r3, r3, #7
 800074a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,data1);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	461a      	mov	r2, r3
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LCD+0xfc>)
 8000754:	f001 f9e6 	bl	8001b24 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <LCD+0xfc>)
 8000760:	f001 f9e0 	bl	8001b24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000764:	2005      	movs	r0, #5
 8000766:	f000 fb01 	bl	8000d6c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <LCD+0xfc>)
 8000772:	f001 f9d7 	bl	8001b24 <HAL_GPIO_WritePin>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010800 	.word	0x40010800

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fa8d 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f8bb 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f947 	bl	8000a24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000796:	f000 f907 	bl	80009a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  	LCD_init();
 800079a:	f7ff ff5b 	bl	8000654 <LCD_init>
    float res1,rezultat1;
    int ceo, ostCeo,ceo1;
    float ost;
    char string[]="km/h";
 800079e:	4a53      	ldr	r2, [pc, #332]	; (80008ec <main+0x168>)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a8:	6018      	str	r0, [r3, #0]
 80007aa:	3304      	adds	r3, #4
 80007ac:	7019      	strb	r1, [r3, #0]

    char buffer[10];

    while (1)
    {	  HAL_ADC_Start(&hadc1);
 80007ae:	4850      	ldr	r0, [pc, #320]	; (80008f0 <main+0x16c>)
 80007b0:	f000 fbd8 	bl	8000f64 <HAL_ADC_Start>
  	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	484d      	ldr	r0, [pc, #308]	; (80008f0 <main+0x16c>)
 80007ba:	f000 fcad 	bl	8001118 <HAL_ADC_PollForConversion>
  	      res1 = HAL_ADC_GetValue(&hadc1);
 80007be:	484c      	ldr	r0, [pc, #304]	; (80008f0 <main+0x16c>)
 80007c0:	f000 fdb0 	bl	8001324 <HAL_ADC_GetValue>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd76 	bl	80002b8 <__aeabi_ui2f>
 80007cc:	4603      	mov	r3, r0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  	      HAL_Delay(200);
 80007d0:	20c8      	movs	r0, #200	; 0xc8
 80007d2:	f000 facb 	bl	8000d6c <HAL_Delay>
  	      rezultat1 = (res1*20)/(4095);
 80007d6:	4947      	ldr	r1, [pc, #284]	; (80008f4 <main+0x170>)
 80007d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007da:	f7ff fdc5 	bl	8000368 <__aeabi_fmul>
 80007de:	4603      	mov	r3, r0
 80007e0:	4945      	ldr	r1, [pc, #276]	; (80008f8 <main+0x174>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fe74 	bl	80004d0 <__aeabi_fdiv>
 80007e8:	4603      	mov	r3, r0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  	      HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 fabd 	bl	8000d6c <HAL_Delay>
  	      HAL_ADC_Stop(&hadc1);
 80007f2:	483f      	ldr	r0, [pc, #252]	; (80008f0 <main+0x16c>)
 80007f4:	f000 fc64 	bl	80010c0 <HAL_ADC_Stop>
  	      LCD(0x01, 0); /* cistimo ekran */
 80007f8:	2100      	movs	r1, #0
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff ff42 	bl	8000684 <LCD>
  	      ceo1=rezultat1*10;
 8000800:	493e      	ldr	r1, [pc, #248]	; (80008fc <main+0x178>)
 8000802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000804:	f7ff fdb0 	bl	8000368 <__aeabi_fmul>
 8000808:	4603      	mov	r3, r0
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fefc 	bl	8000608 <__aeabi_f2iz>
 8000810:	4603      	mov	r3, r0
 8000812:	623b      	str	r3, [r7, #32]
  	      ceo = rezultat1;
 8000814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000816:	f7ff fef7 	bl	8000608 <__aeabi_f2iz>
 800081a:	4603      	mov	r3, r0
 800081c:	61fb      	str	r3, [r7, #28]
  	      ost = rezultat1-ceo;
 800081e:	69f8      	ldr	r0, [r7, #28]
 8000820:	f7ff fd4e 	bl	80002c0 <__aeabi_i2f>
 8000824:	4603      	mov	r3, r0
 8000826:	4619      	mov	r1, r3
 8000828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800082a:	f7ff fc93 	bl	8000154 <__aeabi_fsub>
 800082e:	4603      	mov	r3, r0
 8000830:	61bb      	str	r3, [r7, #24]
  	      ostCeo = ost*100;
 8000832:	4933      	ldr	r1, [pc, #204]	; (8000900 <main+0x17c>)
 8000834:	69b8      	ldr	r0, [r7, #24]
 8000836:	f7ff fd97 	bl	8000368 <__aeabi_fmul>
 800083a:	4603      	mov	r3, r0
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fee3 	bl	8000608 <__aeabi_f2iz>
 8000842:	4603      	mov	r3, r0
 8000844:	617b      	str	r3, [r7, #20]

  	      sprintf(buffer,"%d",ceo1);
 8000846:	463b      	mov	r3, r7
 8000848:	6a3a      	ldr	r2, [r7, #32]
 800084a:	492e      	ldr	r1, [pc, #184]	; (8000904 <main+0x180>)
 800084c:	4618      	mov	r0, r3
 800084e:	f001 ff1b 	bl	8002688 <siprintf>
  	      int i=0;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  	      while(buffer[i]){
 8000856:	e00a      	b.n	800086e <main+0xea>
  	      	  LCD(buffer[i],1);
 8000858:	463a      	mov	r2, r7
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2101      	movs	r1, #1
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff0e 	bl	8000684 <LCD>
  	      	  i++;
 8000868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086a:	3301      	adds	r3, #1
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  	      while(buffer[i]){
 800086e:	463a      	mov	r2, r7
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1ee      	bne.n	8000858 <main+0xd4>
  	      }
  	      LCD('.',1);
 800087a:	2101      	movs	r1, #1
 800087c:	202e      	movs	r0, #46	; 0x2e
 800087e:	f7ff ff01 	bl	8000684 <LCD>
  	      sprintf(buffer,"%d",ostCeo);
 8000882:	463b      	mov	r3, r7
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	491f      	ldr	r1, [pc, #124]	; (8000904 <main+0x180>)
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fefd 	bl	8002688 <siprintf>
  	      i=0;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  	      while(buffer[i]){
 8000892:	e00a      	b.n	80008aa <main+0x126>
  	      	  LCD(buffer[i],1);
 8000894:	463a      	mov	r2, r7
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fef0 	bl	8000684 <LCD>
  	          i++;
 80008a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a6:	3301      	adds	r3, #1
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  	      while(buffer[i]){
 80008aa:	463a      	mov	r2, r7
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1ee      	bne.n	8000894 <main+0x110>
  	      }
  	    i=0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  	    while(string[i])
 80008ba:	e00b      	b.n	80008d4 <main+0x150>
  	    {
  	    	LCD(string[i],1);
 80008bc:	f107 020c 	add.w	r2, r7, #12
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2101      	movs	r1, #1
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fedb 	bl	8000684 <LCD>
  	     	i++;
 80008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d0:	3301      	adds	r3, #1
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  	    while(string[i])
 80008d4:	f107 020c 	add.w	r2, r7, #12
 80008d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1ec      	bne.n	80008bc <main+0x138>
  	    }

  	      HAL_Delay(500);
 80008e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e6:	f000 fa41 	bl	8000d6c <HAL_Delay>
    {	  HAL_ADC_Start(&hadc1);
 80008ea:	e760      	b.n	80007ae <main+0x2a>
 80008ec:	08002f98 	.word	0x08002f98
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	41a00000 	.word	0x41a00000
 80008f8:	457ff000 	.word	0x457ff000
 80008fc:	41200000 	.word	0x41200000
 8000900:	42c80000 	.word	0x42c80000
 8000904:	08002f94 	.word	0x08002f94

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	2228      	movs	r2, #40	; 0x28
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 feae 	bl	8002678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000940:	2310      	movs	r3, #16
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f901 	bl	8001b54 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000958:	f000 f8b8 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fb6e 	bl	8002058 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000982:	f000 f8a3 	bl	8000acc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000986:	2302      	movs	r3, #2
 8000988:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fcdb 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800099c:	f000 f896 	bl	8000acc <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	3750      	adds	r7, #80	; 0x50
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <MX_ADC1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009e6:	f000 f9e5 	bl	8000db4 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f86c 	bl	8000acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0x74>)
 8000a06:	f000 fc99 	bl	800133c <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a10:	f000 f85c 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	40012400 	.word	0x40012400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a20      	ldr	r2, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0xa0>)
 8000a70:	f001 f858 	bl	8001b24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2104      	movs	r1, #4
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_GPIO_Init+0xa4>)
 8000a7a:	f001 f853 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a7e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000a82:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <MX_GPIO_Init+0xa0>)
 8000a98:	f000 fec8 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0xa4>)
 8000ab4:	f000 feba 	bl	800182c <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_MspInit+0x40>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_MspInit+0x40>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_MspInit+0x40>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_MspInit+0x40>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_MspInit+0x40>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_MspInit+0x40>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_ADC_MspInit+0x6c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d121      	bne.n	8000b80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_ADC_MspInit+0x74>)
 8000b7c:	f000 fe56 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40012400 	.word	0x40012400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 f8ab 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f001 fd06 	bl	8002624 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20002800 	.word	0x20002800
 8000c44:	00000400 	.word	0x00000400
 8000c48:	200000bc 	.word	0x200000bc
 8000c4c:	200000d8 	.word	0x200000d8

08000c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff fff8 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c62:	490c      	ldr	r1, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c78:	4c09      	ldr	r4, [pc, #36]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f001 fcd3 	bl	8002630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8a:	f7ff fd7b 	bl	8000784 <main>
  bx lr
 8000c8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c98:	0800301c 	.word	0x0800301c
  ldr r2, =_sbss
 8000c9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca0:	200000d4 	.word	0x200000d4

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x28>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 fd83 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff ff08 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fd8d 	bl	8001812 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 fd63 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x20>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <HAL_IncTick+0x20>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200000c0 	.word	0x200000c0

08000d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <HAL_GetTick+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	200000c0 	.word	0x200000c0

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff fff0 	bl	8000d58 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffe0 	bl	8000d58 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0be      	b.n	8000f54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fe92 	bl	8000b1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fbf1 	bl	80015e0 <ADC_ConversionStop_Disable>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 8099 	bne.w	8000f42 <HAL_ADC_Init+0x18e>
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8095 	bne.w	8000f42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e20:	f023 0302 	bic.w	r3, r3, #2
 8000e24:	f043 0202 	orr.w	r2, r3, #2
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7b1b      	ldrb	r3, [r3, #12]
 8000e3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4c:	d003      	beq.n	8000e56 <HAL_ADC_Init+0xa2>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d102      	bne.n	8000e5c <HAL_ADC_Init+0xa8>
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	e000      	b.n	8000e5e <HAL_ADC_Init+0xaa>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7d1b      	ldrb	r3, [r3, #20]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d119      	bne.n	8000ea0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7b1b      	ldrb	r3, [r3, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d109      	bne.n	8000e88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	035a      	lsls	r2, r3, #13
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	e00b      	b.n	8000ea0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f043 0220 	orr.w	r2, r3, #32
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <HAL_ADC_Init+0x1a8>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed0:	d003      	beq.n	8000eda <HAL_ADC_Init+0x126>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d104      	bne.n	8000ee4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	051b      	lsls	r3, r3, #20
 8000ee2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_ADC_Init+0x1ac>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d10b      	bne.n	8000f20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	f023 0303 	bic.w	r3, r3, #3
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f1e:	e018      	b.n	8000f52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	f023 0312 	bic.w	r3, r3, #18
 8000f28:	f043 0210 	orr.w	r2, r3, #16
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f40:	e007      	b.n	8000f52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f043 0210 	orr.w	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f60:	ff1f0efe 	.word	0xff1f0efe

08000f64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Start+0x1a>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e098      	b.n	80010b0 <HAL_ADC_Start+0x14c>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fad0 	bl	800152c <ADC_Enable>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8087 	bne.w	80010a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a41      	ldr	r2, [pc, #260]	; (80010b8 <HAL_ADC_Start+0x154>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d105      	bne.n	8000fc2 <HAL_ADC_Start+0x5e>
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <HAL_ADC_Start+0x158>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d115      	bne.n	8000fee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d026      	beq.n	800102a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fec:	e01d      	b.n	800102a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <HAL_ADC_Start+0x158>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d004      	beq.n	800100e <HAL_ADC_Start+0xaa>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <HAL_ADC_Start+0x154>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10d      	bne.n	800102a <HAL_ADC_Start+0xc6>
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_ADC_Start+0x158>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001022:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f023 0206 	bic.w	r2, r3, #6
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
 8001042:	e002      	b.n	800104a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f06f 0202 	mvn.w	r2, #2
 800105a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001066:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800106a:	d113      	bne.n	8001094 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_ADC_Start+0x154>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d105      	bne.n	8001082 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_ADC_Start+0x158>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800107e:	2b00      	cmp	r3, #0
 8001080:	d108      	bne.n	8001094 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	e00c      	b.n	80010ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	e003      	b.n	80010ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40012800 	.word	0x40012800
 80010bc:	40012400 	.word	0x40012400

080010c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Stop+0x1a>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e01a      	b.n	8001110 <HAL_ADC_Stop+0x50>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa7c 	bl	80015e0 <ADC_ConversionStop_Disable>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800112e:	f7ff fe13 	bl	8000d58 <HAL_GetTick>
 8001132:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f043 0220 	orr.w	r2, r3, #32
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0d3      	b.n	8001302 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d131      	bne.n	80011cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d12a      	bne.n	80011cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001176:	e021      	b.n	80011bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117e:	d01d      	beq.n	80011bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <HAL_ADC_PollForConversion+0x7e>
 8001186:	f7ff fde7 	bl	8000d58 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d212      	bcs.n	80011bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10b      	bne.n	80011bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f043 0204 	orr.w	r2, r3, #4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e0a2      	b.n	8001302 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0d6      	beq.n	8001178 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ca:	e070      	b.n	80012ae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_ADC_PollForConversion+0x1f4>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	2002      	movs	r0, #2
 80011d2:	f001 f971 	bl	80024b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80011d6:	4603      	mov	r3, r0
 80011d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_ADC_PollForConversion+0x1f8>)
 80011e4:	400b      	ands	r3, r1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d118      	bne.n	800121c <HAL_ADC_PollForConversion+0x104>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68d9      	ldr	r1, [r3, #12]
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <HAL_ADC_PollForConversion+0x1fc>)
 80011f2:	400b      	ands	r3, r1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d111      	bne.n	800121c <HAL_ADC_PollForConversion+0x104>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6919      	ldr	r1, [r3, #16]
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_ADC_PollForConversion+0x200>)
 8001200:	400b      	ands	r3, r1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_ADC_PollForConversion+0x100>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68d9      	ldr	r1, [r3, #12]
 800120c:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_ADC_PollForConversion+0x204>)
 800120e:	400b      	ands	r3, r1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_ADC_PollForConversion+0x100>
 8001214:	2314      	movs	r3, #20
 8001216:	e020      	b.n	800125a <HAL_ADC_PollForConversion+0x142>
 8001218:	2329      	movs	r3, #41	; 0x29
 800121a:	e01e      	b.n	800125a <HAL_ADC_PollForConversion+0x142>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6919      	ldr	r1, [r3, #16]
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_ADC_PollForConversion+0x200>)
 8001224:	400b      	ands	r3, r1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <HAL_ADC_PollForConversion+0x120>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68d9      	ldr	r1, [r3, #12]
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_ADC_PollForConversion+0x204>)
 8001232:	400b      	ands	r3, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00d      	beq.n	8001254 <HAL_ADC_PollForConversion+0x13c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_ADC_PollForConversion+0x208>)
 8001240:	400b      	ands	r3, r1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d108      	bne.n	8001258 <HAL_ADC_PollForConversion+0x140>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_ADC_PollForConversion+0x208>)
 800124e:	400b      	ands	r3, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_ADC_PollForConversion+0x140>
 8001254:	2354      	movs	r3, #84	; 0x54
 8001256:	e000      	b.n	800125a <HAL_ADC_PollForConversion+0x142>
 8001258:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001260:	e021      	b.n	80012a6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d01a      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <HAL_ADC_PollForConversion+0x168>
 8001270:	f7ff fd72 	bl	8000d58 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d20f      	bcs.n	80012a0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d90b      	bls.n	80012a0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f043 0204 	orr.w	r2, r3, #4
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e030      	b.n	8001302 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d8d9      	bhi.n	8001262 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f06f 0212 	mvn.w	r2, #18
 80012b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012d2:	d115      	bne.n	8001300 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d111      	bne.n	8001300 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000
 8001310:	24924924 	.word	0x24924924
 8001314:	00924924 	.word	0x00924924
 8001318:	12492492 	.word	0x12492492
 800131c:	00492492 	.word	0x00492492
 8001320:	00249249 	.word	0x00249249

08001324 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_ADC_ConfigChannel+0x20>
 8001358:	2302      	movs	r3, #2
 800135a:	e0dc      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1da>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b06      	cmp	r3, #6
 800136a:	d81c      	bhi.n	80013a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b05      	subs	r3, #5
 800137e:	221f      	movs	r2, #31
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	4019      	ands	r1, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b05      	subs	r3, #5
 8001398:	fa00 f203 	lsl.w	r2, r0, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
 80013a4:	e03c      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d81c      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b23      	subs	r3, #35	; 0x23
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4019      	ands	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	3b23      	subs	r3, #35	; 0x23
 80013da:	fa00 f203 	lsl.w	r2, r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
 80013e6:	e01b      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b41      	subs	r3, #65	; 0x41
 80013fa:	221f      	movs	r2, #31
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3b41      	subs	r3, #65	; 0x41
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d91c      	bls.n	8001462 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3b1e      	subs	r3, #30
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	e019      	b.n	8001496 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6919      	ldr	r1, [r3, #16]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	fa00 f203 	lsl.w	r2, r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014a2:	2b11      	cmp	r3, #17
 80014a4:	d132      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d125      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d126      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d11a      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_ADC_ConfigChannel+0x1e8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <HAL_ADC_ConfigChannel+0x1ec>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9a      	lsrs	r2, r3, #18
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x1b2>
 80014fa:	e007      	b.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40012400 	.word	0x40012400
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83

0800152c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d040      	beq.n	80015cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <ADC_Enable+0xac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <ADC_Enable+0xb0>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001568:	e002      	b.n	8001570 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001576:	f7ff fbef 	bl	8000d58 <HAL_GetTick>
 800157a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800157c:	e01f      	b.n	80015be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800157e:	f7ff fbeb 	bl	8000d58 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d918      	bls.n	80015be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d011      	beq.n	80015be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e007      	b.n	80015ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d1d8      	bne.n	800157e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12e      	bne.n	8001658 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0201 	bic.w	r2, r2, #1
 8001608:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800160a:	f7ff fba5 	bl	8000d58 <HAL_GetTick>
 800160e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001610:	e01b      	b.n	800164a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001612:	f7ff fba1 	bl	8000d58 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d914      	bls.n	800164a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10d      	bne.n	800164a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e007      	b.n	800165a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d0dc      	beq.n	8001612 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff90 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff49 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff5e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffb0 	bl	8001780 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b08b      	sub	sp, #44	; 0x2c
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183e:	e161      	b.n	8001b04 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001840:	2201      	movs	r2, #1
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8150 	bne.w	8001afe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a97      	ldr	r2, [pc, #604]	; (8001ac0 <HAL_GPIO_Init+0x294>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d05e      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001868:	4a95      	ldr	r2, [pc, #596]	; (8001ac0 <HAL_GPIO_Init+0x294>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d875      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 800186e:	4a95      	ldr	r2, [pc, #596]	; (8001ac4 <HAL_GPIO_Init+0x298>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d058      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001874:	4a93      	ldr	r2, [pc, #588]	; (8001ac4 <HAL_GPIO_Init+0x298>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d86f      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 800187a:	4a93      	ldr	r2, [pc, #588]	; (8001ac8 <HAL_GPIO_Init+0x29c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d052      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001880:	4a91      	ldr	r2, [pc, #580]	; (8001ac8 <HAL_GPIO_Init+0x29c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d869      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 8001886:	4a91      	ldr	r2, [pc, #580]	; (8001acc <HAL_GPIO_Init+0x2a0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d04c      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 800188c:	4a8f      	ldr	r2, [pc, #572]	; (8001acc <HAL_GPIO_Init+0x2a0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d863      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 8001892:	4a8f      	ldr	r2, [pc, #572]	; (8001ad0 <HAL_GPIO_Init+0x2a4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d046      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
 8001898:	4a8d      	ldr	r2, [pc, #564]	; (8001ad0 <HAL_GPIO_Init+0x2a4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d85d      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d82a      	bhi.n	80018f8 <HAL_GPIO_Init+0xcc>
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	d859      	bhi.n	800195a <HAL_GPIO_Init+0x12e>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <HAL_GPIO_Init+0x80>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	08001927 	.word	0x08001927
 80018b0:	08001901 	.word	0x08001901
 80018b4:	08001913 	.word	0x08001913
 80018b8:	08001955 	.word	0x08001955
 80018bc:	0800195b 	.word	0x0800195b
 80018c0:	0800195b 	.word	0x0800195b
 80018c4:	0800195b 	.word	0x0800195b
 80018c8:	0800195b 	.word	0x0800195b
 80018cc:	0800195b 	.word	0x0800195b
 80018d0:	0800195b 	.word	0x0800195b
 80018d4:	0800195b 	.word	0x0800195b
 80018d8:	0800195b 	.word	0x0800195b
 80018dc:	0800195b 	.word	0x0800195b
 80018e0:	0800195b 	.word	0x0800195b
 80018e4:	0800195b 	.word	0x0800195b
 80018e8:	0800195b 	.word	0x0800195b
 80018ec:	0800195b 	.word	0x0800195b
 80018f0:	08001909 	.word	0x08001909
 80018f4:	0800191d 	.word	0x0800191d
 80018f8:	4a76      	ldr	r2, [pc, #472]	; (8001ad4 <HAL_GPIO_Init+0x2a8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fe:	e02c      	b.n	800195a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e029      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	3304      	adds	r3, #4
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e024      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	3308      	adds	r3, #8
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e01f      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	330c      	adds	r3, #12
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e01a      	b.n	800195c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192e:	2304      	movs	r3, #4
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e013      	b.n	800195c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800193c:	2308      	movs	r3, #8
 800193e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	611a      	str	r2, [r3, #16]
          break;
 8001946:	e009      	b.n	800195c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	615a      	str	r2, [r3, #20]
          break;
 8001952:	e003      	b.n	800195c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x130>
          break;
 800195a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d801      	bhi.n	8001966 <HAL_GPIO_Init+0x13a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	e001      	b.n	800196a <HAL_GPIO_Init+0x13e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d802      	bhi.n	8001978 <HAL_GPIO_Init+0x14c>
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x152>
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	3b08      	subs	r3, #8
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	210f      	movs	r1, #15
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	401a      	ands	r2, r3
 8001990:	6a39      	ldr	r1, [r7, #32]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a9 	beq.w	8001afe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_GPIO_Init+0x2ac>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <HAL_GPIO_Init+0x2ac>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_GPIO_Init+0x2ac>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c4:	4a45      	ldr	r2, [pc, #276]	; (8001adc <HAL_GPIO_Init+0x2b0>)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_GPIO_Init+0x2b4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1e0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3c      	ldr	r2, [pc, #240]	; (8001ae4 <HAL_GPIO_Init+0x2b8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1dc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_GPIO_Init+0x2bc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1d8>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1e2>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1e2>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1e2>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a1e:	492f      	ldr	r1, [pc, #188]	; (8001adc <HAL_GPIO_Init+0x2b0>)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a38:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	492b      	ldr	r1, [pc, #172]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4921      	ldr	r1, [pc, #132]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	491d      	ldr	r1, [pc, #116]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4917      	ldr	r1, [pc, #92]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4913      	ldr	r1, [pc, #76]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01f      	beq.n	8001af0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	490d      	ldr	r1, [pc, #52]	; (8001aec <HAL_GPIO_Init+0x2c0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e01f      	b.n	8001afe <HAL_GPIO_Init+0x2d2>
 8001abe:	bf00      	nop
 8001ac0:	10320000 	.word	0x10320000
 8001ac4:	10310000 	.word	0x10310000
 8001ac8:	10220000 	.word	0x10220000
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10120000 	.word	0x10120000
 8001ad4:	10110000 	.word	0x10110000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	40011000 	.word	0x40011000
 8001aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_GPIO_Init+0x2f4>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4909      	ldr	r1, [pc, #36]	; (8001b20 <HAL_GPIO_Init+0x2f4>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	3301      	adds	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f47f ae96 	bne.w	8001840 <HAL_GPIO_Init+0x14>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	372c      	adds	r7, #44	; 0x2c
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e272      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8087 	beq.w	8001c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b74:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d00c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b80:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d112      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5e>
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d10b      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	4b89      	ldr	r3, [pc, #548]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d06c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x12c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d168      	bne.n	8001c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e24c      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x76>
 8001bbc:	4b80      	ldr	r3, [pc, #512]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a7f      	ldr	r2, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e02e      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x98>
 8001bd2:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7a      	ldr	r2, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a77      	ldr	r2, [pc, #476]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0xbc>
 8001bf6:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a71      	ldr	r2, [pc, #452]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001c10:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a67      	ldr	r2, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f892 	bl	8000d58 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f88e 	bl	8000d58 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e200      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe4>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f87e 	bl	8000d58 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f87a 	bl	8000d58 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1ec      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x10c>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8e:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c9a:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x18c>
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x176>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1c0      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4939      	ldr	r1, [pc, #228]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	e03a      	b.n	8001d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x270>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff f833 	bl	8000d58 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f82f 	bl	8000d58 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1a1      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4927      	ldr	r1, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f812 	bl	8000d58 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff f80e 	bl	8000d58 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e180      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03a      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d019      	beq.n	8001d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7fe fff2 	bl	8000d58 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7fe ffee 	bl	8000d58 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e160      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 faba 	bl	8002310 <RCC_Delay>
 8001d9c:	e01c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7fe ffd8 	bl	8000d58 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dac:	f7fe ffd4 	bl	8000d58 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d908      	bls.n	8001dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e146      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	42420000 	.word	0x42420000
 8001dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b92      	ldr	r3, [pc, #584]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e9      	bne.n	8001dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a6 	beq.w	8001f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a87      	ldr	r2, [pc, #540]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b85      	ldr	r3, [pc, #532]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7e      	ldr	r2, [pc, #504]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7fe ff95 	bl	8000d58 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7fe ff91 	bl	8000d58 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e103      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b75      	ldr	r3, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x312>
 8001e58:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x36e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x334>
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	e01c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x36e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x356>
 8001e90:	4b61      	ldr	r3, [pc, #388]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a60      	ldr	r2, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe ff45 	bl	8000d58 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe ff41 	bl	8000d58 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0b1      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff2f 	bl	8000d58 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe ff2b 	bl	8000d58 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e09b      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8087 	beq.w	800204a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d061      	beq.n	800200c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d146      	bne.n	8001fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_RCC_OscConfig+0x4cc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe feff 	bl	8000d58 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe fefb 	bl	8000d58 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e06d      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d108      	bne.n	8001f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4921      	ldr	r1, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f98:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a19      	ldr	r1, [r3, #32]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	491b      	ldr	r1, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fecf 	bl	8000d58 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fecb 	bl	8000d58 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e03d      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x46a>
 8001fdc:	e035      	b.n	800204a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_RCC_OscConfig+0x4cc>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe feb8 	bl	8000d58 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe feb4 	bl	8000d58 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e026      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x498>
 800200a:	e01e      	b.n	800204a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d107      	bne.n	8002024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e019      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x500>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0d0      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4965      	ldr	r1, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d040      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e073      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06b      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4936      	ldr	r1, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fe06 	bl	8000d58 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fe02 	bl	8000d58 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e053      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d210      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4922      	ldr	r1, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1cc>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd64 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
 8002220:	08002fa0 	.word	0x08002fa0
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x30>
 8002256:	2b08      	cmp	r3, #8
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x36>
 800225a:	e027      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800225e:	613b      	str	r3, [r7, #16]
      break;
 8002260:	e027      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0c5b      	lsrs	r3, r3, #17
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800228e:	fb03 f202 	mul.w	r2, r3, r2
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e004      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	613b      	str	r3, [r7, #16]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	693b      	ldr	r3, [r7, #16]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	08002fb8 	.word	0x08002fb8
 80022cc:	08002fc8 	.word	0x08002fc8
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022ec:	f7ff fff2 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0adb      	lsrs	r3, r3, #11
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK2Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	08002fb0 	.word	0x08002fb0

08002310 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <RCC_Delay+0x34>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <RCC_Delay+0x38>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0a5b      	lsrs	r3, r3, #9
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800232c:	bf00      	nop
  }
  while (Delay --);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1e5a      	subs	r2, r3, #1
 8002332:	60fa      	str	r2, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f9      	bne.n	800232c <RCC_Delay+0x1c>
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000000 	.word	0x20000000
 8002348:	10624dd3 	.word	0x10624dd3

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d07d      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236c:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002382:	61d3      	str	r3, [r2, #28]
 8002384:	4b49      	ldr	r3, [pc, #292]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d118      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fcd4 	bl	8000d58 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	e008      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe fcd0 	bl	8000d58 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e06d      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d02e      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d027      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002406:	4a29      	ldr	r2, [pc, #164]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d014      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fc9f 	bl	8000d58 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fc9b 	bl	8000d58 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e036      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4917      	ldr	r1, [pc, #92]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244e:	4313      	orrs	r3, r2
 8002450:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002462:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	490b      	ldr	r1, [pc, #44]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42420440 	.word	0x42420440

080024b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b10      	cmp	r3, #16
 80024de:	f200 808a 	bhi.w	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d045      	beq.n	8002574 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d075      	beq.n	80025da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024ee:	e082      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d07b      	beq.n	80025fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	0c9b      	lsrs	r3, r3, #18
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	4a41      	ldr	r2, [pc, #260]	; (8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0c5b      	lsrs	r3, r3, #17
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	4a3b      	ldr	r2, [pc, #236]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002534:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fbb2 f2f3 	udiv	r2, r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	e004      	b.n	8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255c:	d102      	bne.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	61bb      	str	r3, [r7, #24]
      break;
 8002562:	e04a      	b.n	80025fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
      break;
 8002572:	e042      	b.n	80025fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002584:	d108      	bne.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e01f      	b.n	80025d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a2:	d109      	bne.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80025b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e00f      	b.n	80025d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025c2:	d11c      	bne.n	80025fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d016      	beq.n	80025fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80025d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025d4:	61bb      	str	r3, [r7, #24]
      break;
 80025d6:	e012      	b.n	80025fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025d8:	e011      	b.n	80025fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025da:	f7ff fe85 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0b9b      	lsrs	r3, r3, #14
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	61bb      	str	r3, [r7, #24]
      break;
 80025f4:	e004      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025f6:	bf00      	nop
 80025f8:	e002      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80025fe:	bf00      	nop
    }
  }
  return (frequency);
 8002600:	69bb      	ldr	r3, [r7, #24]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	08002fcc 	.word	0x08002fcc
 8002614:	08002fdc 	.word	0x08002fdc
 8002618:	007a1200 	.word	0x007a1200
 800261c:	003d0900 	.word	0x003d0900
 8002620:	aaaaaaab 	.word	0xaaaaaaab

08002624 <__errno>:
 8002624:	4b01      	ldr	r3, [pc, #4]	; (800262c <__errno+0x8>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	2000000c 	.word	0x2000000c

08002630 <__libc_init_array>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	2600      	movs	r6, #0
 8002634:	4d0c      	ldr	r5, [pc, #48]	; (8002668 <__libc_init_array+0x38>)
 8002636:	4c0d      	ldr	r4, [pc, #52]	; (800266c <__libc_init_array+0x3c>)
 8002638:	1b64      	subs	r4, r4, r5
 800263a:	10a4      	asrs	r4, r4, #2
 800263c:	42a6      	cmp	r6, r4
 800263e:	d109      	bne.n	8002654 <__libc_init_array+0x24>
 8002640:	f000 fc9c 	bl	8002f7c <_init>
 8002644:	2600      	movs	r6, #0
 8002646:	4d0a      	ldr	r5, [pc, #40]	; (8002670 <__libc_init_array+0x40>)
 8002648:	4c0a      	ldr	r4, [pc, #40]	; (8002674 <__libc_init_array+0x44>)
 800264a:	1b64      	subs	r4, r4, r5
 800264c:	10a4      	asrs	r4, r4, #2
 800264e:	42a6      	cmp	r6, r4
 8002650:	d105      	bne.n	800265e <__libc_init_array+0x2e>
 8002652:	bd70      	pop	{r4, r5, r6, pc}
 8002654:	f855 3b04 	ldr.w	r3, [r5], #4
 8002658:	4798      	blx	r3
 800265a:	3601      	adds	r6, #1
 800265c:	e7ee      	b.n	800263c <__libc_init_array+0xc>
 800265e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002662:	4798      	blx	r3
 8002664:	3601      	adds	r6, #1
 8002666:	e7f2      	b.n	800264e <__libc_init_array+0x1e>
 8002668:	08003014 	.word	0x08003014
 800266c:	08003014 	.word	0x08003014
 8002670:	08003014 	.word	0x08003014
 8002674:	08003018 	.word	0x08003018

08002678 <memset>:
 8002678:	4603      	mov	r3, r0
 800267a:	4402      	add	r2, r0
 800267c:	4293      	cmp	r3, r2
 800267e:	d100      	bne.n	8002682 <memset+0xa>
 8002680:	4770      	bx	lr
 8002682:	f803 1b01 	strb.w	r1, [r3], #1
 8002686:	e7f9      	b.n	800267c <memset+0x4>

08002688 <siprintf>:
 8002688:	b40e      	push	{r1, r2, r3}
 800268a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800268e:	b500      	push	{lr}
 8002690:	b09c      	sub	sp, #112	; 0x70
 8002692:	ab1d      	add	r3, sp, #116	; 0x74
 8002694:	9002      	str	r0, [sp, #8]
 8002696:	9006      	str	r0, [sp, #24]
 8002698:	9107      	str	r1, [sp, #28]
 800269a:	9104      	str	r1, [sp, #16]
 800269c:	4808      	ldr	r0, [pc, #32]	; (80026c0 <siprintf+0x38>)
 800269e:	4909      	ldr	r1, [pc, #36]	; (80026c4 <siprintf+0x3c>)
 80026a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80026a4:	9105      	str	r1, [sp, #20]
 80026a6:	6800      	ldr	r0, [r0, #0]
 80026a8:	a902      	add	r1, sp, #8
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	f000 f868 	bl	8002780 <_svfiprintf_r>
 80026b0:	2200      	movs	r2, #0
 80026b2:	9b02      	ldr	r3, [sp, #8]
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	b01c      	add	sp, #112	; 0x70
 80026b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80026bc:	b003      	add	sp, #12
 80026be:	4770      	bx	lr
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	ffff0208 	.word	0xffff0208

080026c8 <__ssputs_r>:
 80026c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026cc:	688e      	ldr	r6, [r1, #8]
 80026ce:	4682      	mov	sl, r0
 80026d0:	429e      	cmp	r6, r3
 80026d2:	460c      	mov	r4, r1
 80026d4:	4690      	mov	r8, r2
 80026d6:	461f      	mov	r7, r3
 80026d8:	d838      	bhi.n	800274c <__ssputs_r+0x84>
 80026da:	898a      	ldrh	r2, [r1, #12]
 80026dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026e0:	d032      	beq.n	8002748 <__ssputs_r+0x80>
 80026e2:	6825      	ldr	r5, [r4, #0]
 80026e4:	6909      	ldr	r1, [r1, #16]
 80026e6:	3301      	adds	r3, #1
 80026e8:	eba5 0901 	sub.w	r9, r5, r1
 80026ec:	6965      	ldr	r5, [r4, #20]
 80026ee:	444b      	add	r3, r9
 80026f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026f8:	106d      	asrs	r5, r5, #1
 80026fa:	429d      	cmp	r5, r3
 80026fc:	bf38      	it	cc
 80026fe:	461d      	movcc	r5, r3
 8002700:	0553      	lsls	r3, r2, #21
 8002702:	d531      	bpl.n	8002768 <__ssputs_r+0xa0>
 8002704:	4629      	mov	r1, r5
 8002706:	f000 fb6f 	bl	8002de8 <_malloc_r>
 800270a:	4606      	mov	r6, r0
 800270c:	b950      	cbnz	r0, 8002724 <__ssputs_r+0x5c>
 800270e:	230c      	movs	r3, #12
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f8ca 3000 	str.w	r3, [sl]
 8002718:	89a3      	ldrh	r3, [r4, #12]
 800271a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271e:	81a3      	strh	r3, [r4, #12]
 8002720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002724:	464a      	mov	r2, r9
 8002726:	6921      	ldr	r1, [r4, #16]
 8002728:	f000 face 	bl	8002cc8 <memcpy>
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002736:	81a3      	strh	r3, [r4, #12]
 8002738:	6126      	str	r6, [r4, #16]
 800273a:	444e      	add	r6, r9
 800273c:	6026      	str	r6, [r4, #0]
 800273e:	463e      	mov	r6, r7
 8002740:	6165      	str	r5, [r4, #20]
 8002742:	eba5 0509 	sub.w	r5, r5, r9
 8002746:	60a5      	str	r5, [r4, #8]
 8002748:	42be      	cmp	r6, r7
 800274a:	d900      	bls.n	800274e <__ssputs_r+0x86>
 800274c:	463e      	mov	r6, r7
 800274e:	4632      	mov	r2, r6
 8002750:	4641      	mov	r1, r8
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	f000 fac6 	bl	8002ce4 <memmove>
 8002758:	68a3      	ldr	r3, [r4, #8]
 800275a:	2000      	movs	r0, #0
 800275c:	1b9b      	subs	r3, r3, r6
 800275e:	60a3      	str	r3, [r4, #8]
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	4433      	add	r3, r6
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	e7db      	b.n	8002720 <__ssputs_r+0x58>
 8002768:	462a      	mov	r2, r5
 800276a:	f000 fbb1 	bl	8002ed0 <_realloc_r>
 800276e:	4606      	mov	r6, r0
 8002770:	2800      	cmp	r0, #0
 8002772:	d1e1      	bne.n	8002738 <__ssputs_r+0x70>
 8002774:	4650      	mov	r0, sl
 8002776:	6921      	ldr	r1, [r4, #16]
 8002778:	f000 face 	bl	8002d18 <_free_r>
 800277c:	e7c7      	b.n	800270e <__ssputs_r+0x46>
	...

08002780 <_svfiprintf_r>:
 8002780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002784:	4698      	mov	r8, r3
 8002786:	898b      	ldrh	r3, [r1, #12]
 8002788:	4607      	mov	r7, r0
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	460d      	mov	r5, r1
 800278e:	4614      	mov	r4, r2
 8002790:	b09d      	sub	sp, #116	; 0x74
 8002792:	d50e      	bpl.n	80027b2 <_svfiprintf_r+0x32>
 8002794:	690b      	ldr	r3, [r1, #16]
 8002796:	b963      	cbnz	r3, 80027b2 <_svfiprintf_r+0x32>
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	f000 fb25 	bl	8002de8 <_malloc_r>
 800279e:	6028      	str	r0, [r5, #0]
 80027a0:	6128      	str	r0, [r5, #16]
 80027a2:	b920      	cbnz	r0, 80027ae <_svfiprintf_r+0x2e>
 80027a4:	230c      	movs	r3, #12
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	e0d1      	b.n	8002952 <_svfiprintf_r+0x1d2>
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	616b      	str	r3, [r5, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	9309      	str	r3, [sp, #36]	; 0x24
 80027b6:	2320      	movs	r3, #32
 80027b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027bc:	2330      	movs	r3, #48	; 0x30
 80027be:	f04f 0901 	mov.w	r9, #1
 80027c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80027c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800296c <_svfiprintf_r+0x1ec>
 80027ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027ce:	4623      	mov	r3, r4
 80027d0:	469a      	mov	sl, r3
 80027d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027d6:	b10a      	cbz	r2, 80027dc <_svfiprintf_r+0x5c>
 80027d8:	2a25      	cmp	r2, #37	; 0x25
 80027da:	d1f9      	bne.n	80027d0 <_svfiprintf_r+0x50>
 80027dc:	ebba 0b04 	subs.w	fp, sl, r4
 80027e0:	d00b      	beq.n	80027fa <_svfiprintf_r+0x7a>
 80027e2:	465b      	mov	r3, fp
 80027e4:	4622      	mov	r2, r4
 80027e6:	4629      	mov	r1, r5
 80027e8:	4638      	mov	r0, r7
 80027ea:	f7ff ff6d 	bl	80026c8 <__ssputs_r>
 80027ee:	3001      	adds	r0, #1
 80027f0:	f000 80aa 	beq.w	8002948 <_svfiprintf_r+0x1c8>
 80027f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027f6:	445a      	add	r2, fp
 80027f8:	9209      	str	r2, [sp, #36]	; 0x24
 80027fa:	f89a 3000 	ldrb.w	r3, [sl]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80a2 	beq.w	8002948 <_svfiprintf_r+0x1c8>
 8002804:	2300      	movs	r3, #0
 8002806:	f04f 32ff 	mov.w	r2, #4294967295
 800280a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800280e:	f10a 0a01 	add.w	sl, sl, #1
 8002812:	9304      	str	r3, [sp, #16]
 8002814:	9307      	str	r3, [sp, #28]
 8002816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800281a:	931a      	str	r3, [sp, #104]	; 0x68
 800281c:	4654      	mov	r4, sl
 800281e:	2205      	movs	r2, #5
 8002820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002824:	4851      	ldr	r0, [pc, #324]	; (800296c <_svfiprintf_r+0x1ec>)
 8002826:	f000 fa41 	bl	8002cac <memchr>
 800282a:	9a04      	ldr	r2, [sp, #16]
 800282c:	b9d8      	cbnz	r0, 8002866 <_svfiprintf_r+0xe6>
 800282e:	06d0      	lsls	r0, r2, #27
 8002830:	bf44      	itt	mi
 8002832:	2320      	movmi	r3, #32
 8002834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002838:	0711      	lsls	r1, r2, #28
 800283a:	bf44      	itt	mi
 800283c:	232b      	movmi	r3, #43	; 0x2b
 800283e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002842:	f89a 3000 	ldrb.w	r3, [sl]
 8002846:	2b2a      	cmp	r3, #42	; 0x2a
 8002848:	d015      	beq.n	8002876 <_svfiprintf_r+0xf6>
 800284a:	4654      	mov	r4, sl
 800284c:	2000      	movs	r0, #0
 800284e:	f04f 0c0a 	mov.w	ip, #10
 8002852:	9a07      	ldr	r2, [sp, #28]
 8002854:	4621      	mov	r1, r4
 8002856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800285a:	3b30      	subs	r3, #48	; 0x30
 800285c:	2b09      	cmp	r3, #9
 800285e:	d94e      	bls.n	80028fe <_svfiprintf_r+0x17e>
 8002860:	b1b0      	cbz	r0, 8002890 <_svfiprintf_r+0x110>
 8002862:	9207      	str	r2, [sp, #28]
 8002864:	e014      	b.n	8002890 <_svfiprintf_r+0x110>
 8002866:	eba0 0308 	sub.w	r3, r0, r8
 800286a:	fa09 f303 	lsl.w	r3, r9, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	46a2      	mov	sl, r4
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	e7d2      	b.n	800281c <_svfiprintf_r+0x9c>
 8002876:	9b03      	ldr	r3, [sp, #12]
 8002878:	1d19      	adds	r1, r3, #4
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	9103      	str	r1, [sp, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	bfbb      	ittet	lt
 8002882:	425b      	neglt	r3, r3
 8002884:	f042 0202 	orrlt.w	r2, r2, #2
 8002888:	9307      	strge	r3, [sp, #28]
 800288a:	9307      	strlt	r3, [sp, #28]
 800288c:	bfb8      	it	lt
 800288e:	9204      	strlt	r2, [sp, #16]
 8002890:	7823      	ldrb	r3, [r4, #0]
 8002892:	2b2e      	cmp	r3, #46	; 0x2e
 8002894:	d10c      	bne.n	80028b0 <_svfiprintf_r+0x130>
 8002896:	7863      	ldrb	r3, [r4, #1]
 8002898:	2b2a      	cmp	r3, #42	; 0x2a
 800289a:	d135      	bne.n	8002908 <_svfiprintf_r+0x188>
 800289c:	9b03      	ldr	r3, [sp, #12]
 800289e:	3402      	adds	r4, #2
 80028a0:	1d1a      	adds	r2, r3, #4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	9203      	str	r2, [sp, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bfb8      	it	lt
 80028aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ae:	9305      	str	r3, [sp, #20]
 80028b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002970 <_svfiprintf_r+0x1f0>
 80028b4:	2203      	movs	r2, #3
 80028b6:	4650      	mov	r0, sl
 80028b8:	7821      	ldrb	r1, [r4, #0]
 80028ba:	f000 f9f7 	bl	8002cac <memchr>
 80028be:	b140      	cbz	r0, 80028d2 <_svfiprintf_r+0x152>
 80028c0:	2340      	movs	r3, #64	; 0x40
 80028c2:	eba0 000a 	sub.w	r0, r0, sl
 80028c6:	fa03 f000 	lsl.w	r0, r3, r0
 80028ca:	9b04      	ldr	r3, [sp, #16]
 80028cc:	3401      	adds	r4, #1
 80028ce:	4303      	orrs	r3, r0
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d6:	2206      	movs	r2, #6
 80028d8:	4826      	ldr	r0, [pc, #152]	; (8002974 <_svfiprintf_r+0x1f4>)
 80028da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028de:	f000 f9e5 	bl	8002cac <memchr>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d038      	beq.n	8002958 <_svfiprintf_r+0x1d8>
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <_svfiprintf_r+0x1f8>)
 80028e8:	bb1b      	cbnz	r3, 8002932 <_svfiprintf_r+0x1b2>
 80028ea:	9b03      	ldr	r3, [sp, #12]
 80028ec:	3307      	adds	r3, #7
 80028ee:	f023 0307 	bic.w	r3, r3, #7
 80028f2:	3308      	adds	r3, #8
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f8:	4433      	add	r3, r6
 80028fa:	9309      	str	r3, [sp, #36]	; 0x24
 80028fc:	e767      	b.n	80027ce <_svfiprintf_r+0x4e>
 80028fe:	460c      	mov	r4, r1
 8002900:	2001      	movs	r0, #1
 8002902:	fb0c 3202 	mla	r2, ip, r2, r3
 8002906:	e7a5      	b.n	8002854 <_svfiprintf_r+0xd4>
 8002908:	2300      	movs	r3, #0
 800290a:	f04f 0c0a 	mov.w	ip, #10
 800290e:	4619      	mov	r1, r3
 8002910:	3401      	adds	r4, #1
 8002912:	9305      	str	r3, [sp, #20]
 8002914:	4620      	mov	r0, r4
 8002916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800291a:	3a30      	subs	r2, #48	; 0x30
 800291c:	2a09      	cmp	r2, #9
 800291e:	d903      	bls.n	8002928 <_svfiprintf_r+0x1a8>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0c5      	beq.n	80028b0 <_svfiprintf_r+0x130>
 8002924:	9105      	str	r1, [sp, #20]
 8002926:	e7c3      	b.n	80028b0 <_svfiprintf_r+0x130>
 8002928:	4604      	mov	r4, r0
 800292a:	2301      	movs	r3, #1
 800292c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002930:	e7f0      	b.n	8002914 <_svfiprintf_r+0x194>
 8002932:	ab03      	add	r3, sp, #12
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	462a      	mov	r2, r5
 8002938:	4638      	mov	r0, r7
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <_svfiprintf_r+0x1fc>)
 800293c:	a904      	add	r1, sp, #16
 800293e:	f3af 8000 	nop.w
 8002942:	1c42      	adds	r2, r0, #1
 8002944:	4606      	mov	r6, r0
 8002946:	d1d6      	bne.n	80028f6 <_svfiprintf_r+0x176>
 8002948:	89ab      	ldrh	r3, [r5, #12]
 800294a:	065b      	lsls	r3, r3, #25
 800294c:	f53f af2c 	bmi.w	80027a8 <_svfiprintf_r+0x28>
 8002950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002952:	b01d      	add	sp, #116	; 0x74
 8002954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002958:	ab03      	add	r3, sp, #12
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	462a      	mov	r2, r5
 800295e:	4638      	mov	r0, r7
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <_svfiprintf_r+0x1fc>)
 8002962:	a904      	add	r1, sp, #16
 8002964:	f000 f87c 	bl	8002a60 <_printf_i>
 8002968:	e7eb      	b.n	8002942 <_svfiprintf_r+0x1c2>
 800296a:	bf00      	nop
 800296c:	08002fde 	.word	0x08002fde
 8002970:	08002fe4 	.word	0x08002fe4
 8002974:	08002fe8 	.word	0x08002fe8
 8002978:	00000000 	.word	0x00000000
 800297c:	080026c9 	.word	0x080026c9

08002980 <_printf_common>:
 8002980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002984:	4616      	mov	r6, r2
 8002986:	4699      	mov	r9, r3
 8002988:	688a      	ldr	r2, [r1, #8]
 800298a:	690b      	ldr	r3, [r1, #16]
 800298c:	4607      	mov	r7, r0
 800298e:	4293      	cmp	r3, r2
 8002990:	bfb8      	it	lt
 8002992:	4613      	movlt	r3, r2
 8002994:	6033      	str	r3, [r6, #0]
 8002996:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800299a:	460c      	mov	r4, r1
 800299c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029a0:	b10a      	cbz	r2, 80029a6 <_printf_common+0x26>
 80029a2:	3301      	adds	r3, #1
 80029a4:	6033      	str	r3, [r6, #0]
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	0699      	lsls	r1, r3, #26
 80029aa:	bf42      	ittt	mi
 80029ac:	6833      	ldrmi	r3, [r6, #0]
 80029ae:	3302      	addmi	r3, #2
 80029b0:	6033      	strmi	r3, [r6, #0]
 80029b2:	6825      	ldr	r5, [r4, #0]
 80029b4:	f015 0506 	ands.w	r5, r5, #6
 80029b8:	d106      	bne.n	80029c8 <_printf_common+0x48>
 80029ba:	f104 0a19 	add.w	sl, r4, #25
 80029be:	68e3      	ldr	r3, [r4, #12]
 80029c0:	6832      	ldr	r2, [r6, #0]
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	42ab      	cmp	r3, r5
 80029c6:	dc28      	bgt.n	8002a1a <_printf_common+0x9a>
 80029c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029cc:	1e13      	subs	r3, r2, #0
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	bf18      	it	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	0692      	lsls	r2, r2, #26
 80029d6:	d42d      	bmi.n	8002a34 <_printf_common+0xb4>
 80029d8:	4649      	mov	r1, r9
 80029da:	4638      	mov	r0, r7
 80029dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029e0:	47c0      	blx	r8
 80029e2:	3001      	adds	r0, #1
 80029e4:	d020      	beq.n	8002a28 <_printf_common+0xa8>
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	68e5      	ldr	r5, [r4, #12]
 80029ea:	f003 0306 	and.w	r3, r3, #6
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf18      	it	ne
 80029f2:	2500      	movne	r5, #0
 80029f4:	6832      	ldr	r2, [r6, #0]
 80029f6:	f04f 0600 	mov.w	r6, #0
 80029fa:	68a3      	ldr	r3, [r4, #8]
 80029fc:	bf08      	it	eq
 80029fe:	1aad      	subeq	r5, r5, r2
 8002a00:	6922      	ldr	r2, [r4, #16]
 8002a02:	bf08      	it	eq
 8002a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bfc4      	itt	gt
 8002a0c:	1a9b      	subgt	r3, r3, r2
 8002a0e:	18ed      	addgt	r5, r5, r3
 8002a10:	341a      	adds	r4, #26
 8002a12:	42b5      	cmp	r5, r6
 8002a14:	d11a      	bne.n	8002a4c <_printf_common+0xcc>
 8002a16:	2000      	movs	r0, #0
 8002a18:	e008      	b.n	8002a2c <_printf_common+0xac>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4652      	mov	r2, sl
 8002a1e:	4649      	mov	r1, r9
 8002a20:	4638      	mov	r0, r7
 8002a22:	47c0      	blx	r8
 8002a24:	3001      	adds	r0, #1
 8002a26:	d103      	bne.n	8002a30 <_printf_common+0xb0>
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a30:	3501      	adds	r5, #1
 8002a32:	e7c4      	b.n	80029be <_printf_common+0x3e>
 8002a34:	2030      	movs	r0, #48	; 0x30
 8002a36:	18e1      	adds	r1, r4, r3
 8002a38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a42:	4422      	add	r2, r4
 8002a44:	3302      	adds	r3, #2
 8002a46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a4a:	e7c5      	b.n	80029d8 <_printf_common+0x58>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4622      	mov	r2, r4
 8002a50:	4649      	mov	r1, r9
 8002a52:	4638      	mov	r0, r7
 8002a54:	47c0      	blx	r8
 8002a56:	3001      	adds	r0, #1
 8002a58:	d0e6      	beq.n	8002a28 <_printf_common+0xa8>
 8002a5a:	3601      	adds	r6, #1
 8002a5c:	e7d9      	b.n	8002a12 <_printf_common+0x92>
	...

08002a60 <_printf_i>:
 8002a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	7e0f      	ldrb	r7, [r1, #24]
 8002a66:	4691      	mov	r9, r2
 8002a68:	2f78      	cmp	r7, #120	; 0x78
 8002a6a:	4680      	mov	r8, r0
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	469a      	mov	sl, r3
 8002a70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a76:	d807      	bhi.n	8002a88 <_printf_i+0x28>
 8002a78:	2f62      	cmp	r7, #98	; 0x62
 8002a7a:	d80a      	bhi.n	8002a92 <_printf_i+0x32>
 8002a7c:	2f00      	cmp	r7, #0
 8002a7e:	f000 80d9 	beq.w	8002c34 <_printf_i+0x1d4>
 8002a82:	2f58      	cmp	r7, #88	; 0x58
 8002a84:	f000 80a4 	beq.w	8002bd0 <_printf_i+0x170>
 8002a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a90:	e03a      	b.n	8002b08 <_printf_i+0xa8>
 8002a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a96:	2b15      	cmp	r3, #21
 8002a98:	d8f6      	bhi.n	8002a88 <_printf_i+0x28>
 8002a9a:	a101      	add	r1, pc, #4	; (adr r1, 8002aa0 <_printf_i+0x40>)
 8002a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aa0:	08002af9 	.word	0x08002af9
 8002aa4:	08002b0d 	.word	0x08002b0d
 8002aa8:	08002a89 	.word	0x08002a89
 8002aac:	08002a89 	.word	0x08002a89
 8002ab0:	08002a89 	.word	0x08002a89
 8002ab4:	08002a89 	.word	0x08002a89
 8002ab8:	08002b0d 	.word	0x08002b0d
 8002abc:	08002a89 	.word	0x08002a89
 8002ac0:	08002a89 	.word	0x08002a89
 8002ac4:	08002a89 	.word	0x08002a89
 8002ac8:	08002a89 	.word	0x08002a89
 8002acc:	08002c1b 	.word	0x08002c1b
 8002ad0:	08002b3d 	.word	0x08002b3d
 8002ad4:	08002bfd 	.word	0x08002bfd
 8002ad8:	08002a89 	.word	0x08002a89
 8002adc:	08002a89 	.word	0x08002a89
 8002ae0:	08002c3d 	.word	0x08002c3d
 8002ae4:	08002a89 	.word	0x08002a89
 8002ae8:	08002b3d 	.word	0x08002b3d
 8002aec:	08002a89 	.word	0x08002a89
 8002af0:	08002a89 	.word	0x08002a89
 8002af4:	08002c05 	.word	0x08002c05
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	602a      	str	r2, [r5, #0]
 8002b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0a4      	b.n	8002c56 <_printf_i+0x1f6>
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	6829      	ldr	r1, [r5, #0]
 8002b10:	0606      	lsls	r6, r0, #24
 8002b12:	f101 0304 	add.w	r3, r1, #4
 8002b16:	d50a      	bpl.n	8002b2e <_printf_i+0xce>
 8002b18:	680e      	ldr	r6, [r1, #0]
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	2e00      	cmp	r6, #0
 8002b1e:	da03      	bge.n	8002b28 <_printf_i+0xc8>
 8002b20:	232d      	movs	r3, #45	; 0x2d
 8002b22:	4276      	negs	r6, r6
 8002b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b28:	230a      	movs	r3, #10
 8002b2a:	485e      	ldr	r0, [pc, #376]	; (8002ca4 <_printf_i+0x244>)
 8002b2c:	e019      	b.n	8002b62 <_printf_i+0x102>
 8002b2e:	680e      	ldr	r6, [r1, #0]
 8002b30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b34:	602b      	str	r3, [r5, #0]
 8002b36:	bf18      	it	ne
 8002b38:	b236      	sxthne	r6, r6
 8002b3a:	e7ef      	b.n	8002b1c <_printf_i+0xbc>
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	6820      	ldr	r0, [r4, #0]
 8002b40:	1d19      	adds	r1, r3, #4
 8002b42:	6029      	str	r1, [r5, #0]
 8002b44:	0601      	lsls	r1, r0, #24
 8002b46:	d501      	bpl.n	8002b4c <_printf_i+0xec>
 8002b48:	681e      	ldr	r6, [r3, #0]
 8002b4a:	e002      	b.n	8002b52 <_printf_i+0xf2>
 8002b4c:	0646      	lsls	r6, r0, #25
 8002b4e:	d5fb      	bpl.n	8002b48 <_printf_i+0xe8>
 8002b50:	881e      	ldrh	r6, [r3, #0]
 8002b52:	2f6f      	cmp	r7, #111	; 0x6f
 8002b54:	bf0c      	ite	eq
 8002b56:	2308      	moveq	r3, #8
 8002b58:	230a      	movne	r3, #10
 8002b5a:	4852      	ldr	r0, [pc, #328]	; (8002ca4 <_printf_i+0x244>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b62:	6865      	ldr	r5, [r4, #4]
 8002b64:	2d00      	cmp	r5, #0
 8002b66:	bfa8      	it	ge
 8002b68:	6821      	ldrge	r1, [r4, #0]
 8002b6a:	60a5      	str	r5, [r4, #8]
 8002b6c:	bfa4      	itt	ge
 8002b6e:	f021 0104 	bicge.w	r1, r1, #4
 8002b72:	6021      	strge	r1, [r4, #0]
 8002b74:	b90e      	cbnz	r6, 8002b7a <_printf_i+0x11a>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	d04d      	beq.n	8002c16 <_printf_i+0x1b6>
 8002b7a:	4615      	mov	r5, r2
 8002b7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b80:	fb03 6711 	mls	r7, r3, r1, r6
 8002b84:	5dc7      	ldrb	r7, [r0, r7]
 8002b86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b8a:	4637      	mov	r7, r6
 8002b8c:	42bb      	cmp	r3, r7
 8002b8e:	460e      	mov	r6, r1
 8002b90:	d9f4      	bls.n	8002b7c <_printf_i+0x11c>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d10b      	bne.n	8002bae <_printf_i+0x14e>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	07de      	lsls	r6, r3, #31
 8002b9a:	d508      	bpl.n	8002bae <_printf_i+0x14e>
 8002b9c:	6923      	ldr	r3, [r4, #16]
 8002b9e:	6861      	ldr	r1, [r4, #4]
 8002ba0:	4299      	cmp	r1, r3
 8002ba2:	bfde      	ittt	le
 8002ba4:	2330      	movle	r3, #48	; 0x30
 8002ba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002baa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bae:	1b52      	subs	r2, r2, r5
 8002bb0:	6122      	str	r2, [r4, #16]
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4640      	mov	r0, r8
 8002bb8:	f8cd a000 	str.w	sl, [sp]
 8002bbc:	aa03      	add	r2, sp, #12
 8002bbe:	f7ff fedf 	bl	8002980 <_printf_common>
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d14c      	bne.n	8002c60 <_printf_i+0x200>
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	b004      	add	sp, #16
 8002bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd0:	4834      	ldr	r0, [pc, #208]	; (8002ca4 <_printf_i+0x244>)
 8002bd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002bd6:	6829      	ldr	r1, [r5, #0]
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bde:	6029      	str	r1, [r5, #0]
 8002be0:	061d      	lsls	r5, r3, #24
 8002be2:	d514      	bpl.n	8002c0e <_printf_i+0x1ae>
 8002be4:	07df      	lsls	r7, r3, #31
 8002be6:	bf44      	itt	mi
 8002be8:	f043 0320 	orrmi.w	r3, r3, #32
 8002bec:	6023      	strmi	r3, [r4, #0]
 8002bee:	b91e      	cbnz	r6, 8002bf8 <_printf_i+0x198>
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f023 0320 	bic.w	r3, r3, #32
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	e7af      	b.n	8002b5c <_printf_i+0xfc>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	f043 0320 	orr.w	r3, r3, #32
 8002c02:	6023      	str	r3, [r4, #0]
 8002c04:	2378      	movs	r3, #120	; 0x78
 8002c06:	4828      	ldr	r0, [pc, #160]	; (8002ca8 <_printf_i+0x248>)
 8002c08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c0c:	e7e3      	b.n	8002bd6 <_printf_i+0x176>
 8002c0e:	0659      	lsls	r1, r3, #25
 8002c10:	bf48      	it	mi
 8002c12:	b2b6      	uxthmi	r6, r6
 8002c14:	e7e6      	b.n	8002be4 <_printf_i+0x184>
 8002c16:	4615      	mov	r5, r2
 8002c18:	e7bb      	b.n	8002b92 <_printf_i+0x132>
 8002c1a:	682b      	ldr	r3, [r5, #0]
 8002c1c:	6826      	ldr	r6, [r4, #0]
 8002c1e:	1d18      	adds	r0, r3, #4
 8002c20:	6961      	ldr	r1, [r4, #20]
 8002c22:	6028      	str	r0, [r5, #0]
 8002c24:	0635      	lsls	r5, r6, #24
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	d501      	bpl.n	8002c2e <_printf_i+0x1ce>
 8002c2a:	6019      	str	r1, [r3, #0]
 8002c2c:	e002      	b.n	8002c34 <_printf_i+0x1d4>
 8002c2e:	0670      	lsls	r0, r6, #25
 8002c30:	d5fb      	bpl.n	8002c2a <_printf_i+0x1ca>
 8002c32:	8019      	strh	r1, [r3, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	4615      	mov	r5, r2
 8002c38:	6123      	str	r3, [r4, #16]
 8002c3a:	e7ba      	b.n	8002bb2 <_printf_i+0x152>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	2100      	movs	r1, #0
 8002c40:	1d1a      	adds	r2, r3, #4
 8002c42:	602a      	str	r2, [r5, #0]
 8002c44:	681d      	ldr	r5, [r3, #0]
 8002c46:	6862      	ldr	r2, [r4, #4]
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f000 f82f 	bl	8002cac <memchr>
 8002c4e:	b108      	cbz	r0, 8002c54 <_printf_i+0x1f4>
 8002c50:	1b40      	subs	r0, r0, r5
 8002c52:	6060      	str	r0, [r4, #4]
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	6123      	str	r3, [r4, #16]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c5e:	e7a8      	b.n	8002bb2 <_printf_i+0x152>
 8002c60:	462a      	mov	r2, r5
 8002c62:	4649      	mov	r1, r9
 8002c64:	4640      	mov	r0, r8
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	47d0      	blx	sl
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	d0ab      	beq.n	8002bc6 <_printf_i+0x166>
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	079b      	lsls	r3, r3, #30
 8002c72:	d413      	bmi.n	8002c9c <_printf_i+0x23c>
 8002c74:	68e0      	ldr	r0, [r4, #12]
 8002c76:	9b03      	ldr	r3, [sp, #12]
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	bfb8      	it	lt
 8002c7c:	4618      	movlt	r0, r3
 8002c7e:	e7a4      	b.n	8002bca <_printf_i+0x16a>
 8002c80:	2301      	movs	r3, #1
 8002c82:	4632      	mov	r2, r6
 8002c84:	4649      	mov	r1, r9
 8002c86:	4640      	mov	r0, r8
 8002c88:	47d0      	blx	sl
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d09b      	beq.n	8002bc6 <_printf_i+0x166>
 8002c8e:	3501      	adds	r5, #1
 8002c90:	68e3      	ldr	r3, [r4, #12]
 8002c92:	9903      	ldr	r1, [sp, #12]
 8002c94:	1a5b      	subs	r3, r3, r1
 8002c96:	42ab      	cmp	r3, r5
 8002c98:	dcf2      	bgt.n	8002c80 <_printf_i+0x220>
 8002c9a:	e7eb      	b.n	8002c74 <_printf_i+0x214>
 8002c9c:	2500      	movs	r5, #0
 8002c9e:	f104 0619 	add.w	r6, r4, #25
 8002ca2:	e7f5      	b.n	8002c90 <_printf_i+0x230>
 8002ca4:	08002fef 	.word	0x08002fef
 8002ca8:	08003000 	.word	0x08003000

08002cac <memchr>:
 8002cac:	4603      	mov	r3, r0
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	b2c9      	uxtb	r1, r1
 8002cb2:	4402      	add	r2, r0
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	d101      	bne.n	8002cbe <memchr+0x12>
 8002cba:	2000      	movs	r0, #0
 8002cbc:	e003      	b.n	8002cc6 <memchr+0x1a>
 8002cbe:	7804      	ldrb	r4, [r0, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	428c      	cmp	r4, r1
 8002cc4:	d1f6      	bne.n	8002cb4 <memchr+0x8>
 8002cc6:	bd10      	pop	{r4, pc}

08002cc8 <memcpy>:
 8002cc8:	440a      	add	r2, r1
 8002cca:	4291      	cmp	r1, r2
 8002ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cd0:	d100      	bne.n	8002cd4 <memcpy+0xc>
 8002cd2:	4770      	bx	lr
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cda:	4291      	cmp	r1, r2
 8002cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ce0:	d1f9      	bne.n	8002cd6 <memcpy+0xe>
 8002ce2:	bd10      	pop	{r4, pc}

08002ce4 <memmove>:
 8002ce4:	4288      	cmp	r0, r1
 8002ce6:	b510      	push	{r4, lr}
 8002ce8:	eb01 0402 	add.w	r4, r1, r2
 8002cec:	d902      	bls.n	8002cf4 <memmove+0x10>
 8002cee:	4284      	cmp	r4, r0
 8002cf0:	4623      	mov	r3, r4
 8002cf2:	d807      	bhi.n	8002d04 <memmove+0x20>
 8002cf4:	1e43      	subs	r3, r0, #1
 8002cf6:	42a1      	cmp	r1, r4
 8002cf8:	d008      	beq.n	8002d0c <memmove+0x28>
 8002cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d02:	e7f8      	b.n	8002cf6 <memmove+0x12>
 8002d04:	4601      	mov	r1, r0
 8002d06:	4402      	add	r2, r0
 8002d08:	428a      	cmp	r2, r1
 8002d0a:	d100      	bne.n	8002d0e <memmove+0x2a>
 8002d0c:	bd10      	pop	{r4, pc}
 8002d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d16:	e7f7      	b.n	8002d08 <memmove+0x24>

08002d18 <_free_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	2900      	cmp	r1, #0
 8002d1e:	d040      	beq.n	8002da2 <_free_r+0x8a>
 8002d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d24:	1f0c      	subs	r4, r1, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bfb8      	it	lt
 8002d2a:	18e4      	addlt	r4, r4, r3
 8002d2c:	f000 f910 	bl	8002f50 <__malloc_lock>
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <_free_r+0x8c>)
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	b933      	cbnz	r3, 8002d44 <_free_r+0x2c>
 8002d36:	6063      	str	r3, [r4, #4]
 8002d38:	6014      	str	r4, [r2, #0]
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d40:	f000 b90c 	b.w	8002f5c <__malloc_unlock>
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	d908      	bls.n	8002d5a <_free_r+0x42>
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	1821      	adds	r1, r4, r0
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	bf01      	itttt	eq
 8002d50:	6819      	ldreq	r1, [r3, #0]
 8002d52:	685b      	ldreq	r3, [r3, #4]
 8002d54:	1809      	addeq	r1, r1, r0
 8002d56:	6021      	streq	r1, [r4, #0]
 8002d58:	e7ed      	b.n	8002d36 <_free_r+0x1e>
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	b10b      	cbz	r3, 8002d64 <_free_r+0x4c>
 8002d60:	42a3      	cmp	r3, r4
 8002d62:	d9fa      	bls.n	8002d5a <_free_r+0x42>
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	1850      	adds	r0, r2, r1
 8002d68:	42a0      	cmp	r0, r4
 8002d6a:	d10b      	bne.n	8002d84 <_free_r+0x6c>
 8002d6c:	6820      	ldr	r0, [r4, #0]
 8002d6e:	4401      	add	r1, r0
 8002d70:	1850      	adds	r0, r2, r1
 8002d72:	4283      	cmp	r3, r0
 8002d74:	6011      	str	r1, [r2, #0]
 8002d76:	d1e0      	bne.n	8002d3a <_free_r+0x22>
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4401      	add	r1, r0
 8002d7e:	6011      	str	r1, [r2, #0]
 8002d80:	6053      	str	r3, [r2, #4]
 8002d82:	e7da      	b.n	8002d3a <_free_r+0x22>
 8002d84:	d902      	bls.n	8002d8c <_free_r+0x74>
 8002d86:	230c      	movs	r3, #12
 8002d88:	602b      	str	r3, [r5, #0]
 8002d8a:	e7d6      	b.n	8002d3a <_free_r+0x22>
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	1821      	adds	r1, r4, r0
 8002d90:	428b      	cmp	r3, r1
 8002d92:	bf01      	itttt	eq
 8002d94:	6819      	ldreq	r1, [r3, #0]
 8002d96:	685b      	ldreq	r3, [r3, #4]
 8002d98:	1809      	addeq	r1, r1, r0
 8002d9a:	6021      	streq	r1, [r4, #0]
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	6054      	str	r4, [r2, #4]
 8002da0:	e7cb      	b.n	8002d3a <_free_r+0x22>
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	200000c4 	.word	0x200000c4

08002da8 <sbrk_aligned>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	4e0e      	ldr	r6, [pc, #56]	; (8002de4 <sbrk_aligned+0x3c>)
 8002dac:	460c      	mov	r4, r1
 8002dae:	6831      	ldr	r1, [r6, #0]
 8002db0:	4605      	mov	r5, r0
 8002db2:	b911      	cbnz	r1, 8002dba <sbrk_aligned+0x12>
 8002db4:	f000 f8bc 	bl	8002f30 <_sbrk_r>
 8002db8:	6030      	str	r0, [r6, #0]
 8002dba:	4621      	mov	r1, r4
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f000 f8b7 	bl	8002f30 <_sbrk_r>
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	d00a      	beq.n	8002ddc <sbrk_aligned+0x34>
 8002dc6:	1cc4      	adds	r4, r0, #3
 8002dc8:	f024 0403 	bic.w	r4, r4, #3
 8002dcc:	42a0      	cmp	r0, r4
 8002dce:	d007      	beq.n	8002de0 <sbrk_aligned+0x38>
 8002dd0:	1a21      	subs	r1, r4, r0
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f000 f8ac 	bl	8002f30 <_sbrk_r>
 8002dd8:	3001      	adds	r0, #1
 8002dda:	d101      	bne.n	8002de0 <sbrk_aligned+0x38>
 8002ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8002de0:	4620      	mov	r0, r4
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	200000c8 	.word	0x200000c8

08002de8 <_malloc_r>:
 8002de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dec:	1ccd      	adds	r5, r1, #3
 8002dee:	f025 0503 	bic.w	r5, r5, #3
 8002df2:	3508      	adds	r5, #8
 8002df4:	2d0c      	cmp	r5, #12
 8002df6:	bf38      	it	cc
 8002df8:	250c      	movcc	r5, #12
 8002dfa:	2d00      	cmp	r5, #0
 8002dfc:	4607      	mov	r7, r0
 8002dfe:	db01      	blt.n	8002e04 <_malloc_r+0x1c>
 8002e00:	42a9      	cmp	r1, r5
 8002e02:	d905      	bls.n	8002e10 <_malloc_r+0x28>
 8002e04:	230c      	movs	r3, #12
 8002e06:	2600      	movs	r6, #0
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e10:	4e2e      	ldr	r6, [pc, #184]	; (8002ecc <_malloc_r+0xe4>)
 8002e12:	f000 f89d 	bl	8002f50 <__malloc_lock>
 8002e16:	6833      	ldr	r3, [r6, #0]
 8002e18:	461c      	mov	r4, r3
 8002e1a:	bb34      	cbnz	r4, 8002e6a <_malloc_r+0x82>
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4638      	mov	r0, r7
 8002e20:	f7ff ffc2 	bl	8002da8 <sbrk_aligned>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	4604      	mov	r4, r0
 8002e28:	d14d      	bne.n	8002ec6 <_malloc_r+0xde>
 8002e2a:	6834      	ldr	r4, [r6, #0]
 8002e2c:	4626      	mov	r6, r4
 8002e2e:	2e00      	cmp	r6, #0
 8002e30:	d140      	bne.n	8002eb4 <_malloc_r+0xcc>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	4631      	mov	r1, r6
 8002e36:	4638      	mov	r0, r7
 8002e38:	eb04 0803 	add.w	r8, r4, r3
 8002e3c:	f000 f878 	bl	8002f30 <_sbrk_r>
 8002e40:	4580      	cmp	r8, r0
 8002e42:	d13a      	bne.n	8002eba <_malloc_r+0xd2>
 8002e44:	6821      	ldr	r1, [r4, #0]
 8002e46:	3503      	adds	r5, #3
 8002e48:	1a6d      	subs	r5, r5, r1
 8002e4a:	f025 0503 	bic.w	r5, r5, #3
 8002e4e:	3508      	adds	r5, #8
 8002e50:	2d0c      	cmp	r5, #12
 8002e52:	bf38      	it	cc
 8002e54:	250c      	movcc	r5, #12
 8002e56:	4638      	mov	r0, r7
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7ff ffa5 	bl	8002da8 <sbrk_aligned>
 8002e5e:	3001      	adds	r0, #1
 8002e60:	d02b      	beq.n	8002eba <_malloc_r+0xd2>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	442b      	add	r3, r5
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	e00e      	b.n	8002e88 <_malloc_r+0xa0>
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	1b52      	subs	r2, r2, r5
 8002e6e:	d41e      	bmi.n	8002eae <_malloc_r+0xc6>
 8002e70:	2a0b      	cmp	r2, #11
 8002e72:	d916      	bls.n	8002ea2 <_malloc_r+0xba>
 8002e74:	1961      	adds	r1, r4, r5
 8002e76:	42a3      	cmp	r3, r4
 8002e78:	6025      	str	r5, [r4, #0]
 8002e7a:	bf18      	it	ne
 8002e7c:	6059      	strne	r1, [r3, #4]
 8002e7e:	6863      	ldr	r3, [r4, #4]
 8002e80:	bf08      	it	eq
 8002e82:	6031      	streq	r1, [r6, #0]
 8002e84:	5162      	str	r2, [r4, r5]
 8002e86:	604b      	str	r3, [r1, #4]
 8002e88:	4638      	mov	r0, r7
 8002e8a:	f104 060b 	add.w	r6, r4, #11
 8002e8e:	f000 f865 	bl	8002f5c <__malloc_unlock>
 8002e92:	f026 0607 	bic.w	r6, r6, #7
 8002e96:	1d23      	adds	r3, r4, #4
 8002e98:	1af2      	subs	r2, r6, r3
 8002e9a:	d0b6      	beq.n	8002e0a <_malloc_r+0x22>
 8002e9c:	1b9b      	subs	r3, r3, r6
 8002e9e:	50a3      	str	r3, [r4, r2]
 8002ea0:	e7b3      	b.n	8002e0a <_malloc_r+0x22>
 8002ea2:	6862      	ldr	r2, [r4, #4]
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	bf0c      	ite	eq
 8002ea8:	6032      	streq	r2, [r6, #0]
 8002eaa:	605a      	strne	r2, [r3, #4]
 8002eac:	e7ec      	b.n	8002e88 <_malloc_r+0xa0>
 8002eae:	4623      	mov	r3, r4
 8002eb0:	6864      	ldr	r4, [r4, #4]
 8002eb2:	e7b2      	b.n	8002e1a <_malloc_r+0x32>
 8002eb4:	4634      	mov	r4, r6
 8002eb6:	6876      	ldr	r6, [r6, #4]
 8002eb8:	e7b9      	b.n	8002e2e <_malloc_r+0x46>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	f000 f84c 	bl	8002f5c <__malloc_unlock>
 8002ec4:	e7a1      	b.n	8002e0a <_malloc_r+0x22>
 8002ec6:	6025      	str	r5, [r4, #0]
 8002ec8:	e7de      	b.n	8002e88 <_malloc_r+0xa0>
 8002eca:	bf00      	nop
 8002ecc:	200000c4 	.word	0x200000c4

08002ed0 <_realloc_r>:
 8002ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed4:	4680      	mov	r8, r0
 8002ed6:	4614      	mov	r4, r2
 8002ed8:	460e      	mov	r6, r1
 8002eda:	b921      	cbnz	r1, 8002ee6 <_realloc_r+0x16>
 8002edc:	4611      	mov	r1, r2
 8002ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee2:	f7ff bf81 	b.w	8002de8 <_malloc_r>
 8002ee6:	b92a      	cbnz	r2, 8002ef4 <_realloc_r+0x24>
 8002ee8:	f7ff ff16 	bl	8002d18 <_free_r>
 8002eec:	4625      	mov	r5, r4
 8002eee:	4628      	mov	r0, r5
 8002ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef4:	f000 f838 	bl	8002f68 <_malloc_usable_size_r>
 8002ef8:	4284      	cmp	r4, r0
 8002efa:	4607      	mov	r7, r0
 8002efc:	d802      	bhi.n	8002f04 <_realloc_r+0x34>
 8002efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f02:	d812      	bhi.n	8002f2a <_realloc_r+0x5a>
 8002f04:	4621      	mov	r1, r4
 8002f06:	4640      	mov	r0, r8
 8002f08:	f7ff ff6e 	bl	8002de8 <_malloc_r>
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d0ed      	beq.n	8002eee <_realloc_r+0x1e>
 8002f12:	42bc      	cmp	r4, r7
 8002f14:	4622      	mov	r2, r4
 8002f16:	4631      	mov	r1, r6
 8002f18:	bf28      	it	cs
 8002f1a:	463a      	movcs	r2, r7
 8002f1c:	f7ff fed4 	bl	8002cc8 <memcpy>
 8002f20:	4631      	mov	r1, r6
 8002f22:	4640      	mov	r0, r8
 8002f24:	f7ff fef8 	bl	8002d18 <_free_r>
 8002f28:	e7e1      	b.n	8002eee <_realloc_r+0x1e>
 8002f2a:	4635      	mov	r5, r6
 8002f2c:	e7df      	b.n	8002eee <_realloc_r+0x1e>
	...

08002f30 <_sbrk_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	2300      	movs	r3, #0
 8002f34:	4d05      	ldr	r5, [pc, #20]	; (8002f4c <_sbrk_r+0x1c>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	f7fd fe52 	bl	8000be4 <_sbrk>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_sbrk_r+0x1a>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_sbrk_r+0x1a>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	200000cc 	.word	0x200000cc

08002f50 <__malloc_lock>:
 8002f50:	4801      	ldr	r0, [pc, #4]	; (8002f58 <__malloc_lock+0x8>)
 8002f52:	f000 b811 	b.w	8002f78 <__retarget_lock_acquire_recursive>
 8002f56:	bf00      	nop
 8002f58:	200000d0 	.word	0x200000d0

08002f5c <__malloc_unlock>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <__malloc_unlock+0x8>)
 8002f5e:	f000 b80c 	b.w	8002f7a <__retarget_lock_release_recursive>
 8002f62:	bf00      	nop
 8002f64:	200000d0 	.word	0x200000d0

08002f68 <_malloc_usable_size_r>:
 8002f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f6c:	1f18      	subs	r0, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfbc      	itt	lt
 8002f72:	580b      	ldrlt	r3, [r1, r0]
 8002f74:	18c0      	addlt	r0, r0, r3
 8002f76:	4770      	bx	lr

08002f78 <__retarget_lock_acquire_recursive>:
 8002f78:	4770      	bx	lr

08002f7a <__retarget_lock_release_recursive>:
 8002f7a:	4770      	bx	lr

08002f7c <_init>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr

08002f88 <_fini>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr
